tosca_definitions_version: tosca_simple_yaml_1_0

description: SockShop microservice-based  demo application

repositories:
  docker_hub: https://registry.hub.docker.com/

imports:
  # - tosker: https://di-unipi-socc.github.io/tosker-types/0.0.6/tosker.yaml
  - tosker: tosker-types.yaml

topology_template:
  inputs:
    edge-router_port:
      type: integer
      default: 80
      description: Edger router external port
    front-end_branch:
      type: string
      default: master
      description: Branch of the sockershop front-end microservice


  node_templates:

    edge-router:
      type: tosker.nodes.Container
      requirements:
        - connection: front-end
      properties:
        ports:
          80: { get_input: edge-router_port }
      artifacts:
        my_image:
          file: weaveworksdemos/edge-router:latest
          type: tosker.artifacts.Image.Service
          repository: docker_hub

    front-end:
      type: tosker.nodes.Software
      requirements:
        - host:   #  front-end-node
          node_filter:
            properties:
              - supported_sw:
                - npm: 2.15.x
                - node: 4.x

        - connection: catalogue
        - connection: user
        - connection: carts
        # TODO: pass the endpoint in in env_variable (http://carts is the default endpoint)
        # https://github.com/microservices-demo/front-end/blob/master/api/endpoints.js)
        - connection: orders
        - connection: payment
      interfaces:
        Standard:
          create:
            implementation: scripts/front-end/install.sh
            inputs:
              repo: https://github.com/microservices-demo/front-end.git
              branch: { get_input: front-end_branch }
          start:
            implementation: scripts/front-end/start.sh
          stop:
            implementation: scripts/front-end/stop.sh
          delete:
            implementation: scripts/front-end/uninstall.sh

    catalogue:
      type: tosker.nodes.Software
      requirements:
        - host: #catalogue-go
            node_filter:
              properties:
                - supported_sw:
                  - go: 1.7.x
        - connection: catalogue-db
      interfaces:
        Standard:
          create:
            implementation: scripts/catalogue/install.sh
          start:
            implementation: scripts/catalogue/start.sh
          stop:
            implementation: scripts/catalogue/stop.sh
          delete:
            implementation: scripts/catalogue/uninstall.sh

    user:
      type: tosker.nodes.Software
      requirements:
        - connection: user-db
        - host: user-go
      interfaces:
        Standard:
          configure:
            implementation: scripts/user/configure.sh
          create:
            implementation: scripts/user/install.sh
          start:
            implementation: scripts/user/start.sh
            inputs:
              database: mongodb
              mongohost: user-db
              port: 80
          stop:
            implementation: scripts/user/stop.sh
          delete:
            implementation: scripts/user/uninstall.sh

    carts:
      type: tosker.nodes.Software
      requirements:
        - host: carts-java
        - connection: carts-db
      artifacts:
        cartsjar: ./artifacts/carts.jar
      interfaces:
        Standard:
          create:
            implementation: scripts/carts/install.sh
          start:
            implementation: scripts/carts/start.sh
            inputs:
              port: 80
              jar: { get_artifact: [SELF, cartsjar] }
          stop:
            implementation: scripts/carts/stop.sh
          delete:
            implementation: scripts/carts/uninstall.sh

   # INFORMATION: Closed connection [connectionId{localValue:42, serverValue:248}] to localhost:27017 because the pool has been closed.
    orders:
      type: tosker.nodes.Software
      requirements:
        - host: orders-java
        - connection: orders-db
        - connection: zipkin
        - connection: shipping
        - connection: carts
        - connection: user
        - connection: payment
      artifacts:
        ordersjar: ./artifacts/orders.jar
      interfaces:
        Standard:
          create:
            implementation: scripts/orders/install.sh
          start:
            implementation: scripts/orders/start.sh
            inputs:
              port: 80
              jar: { get_artifact: [SELF, ordersjar] }
          stop:
            implementation: scripts/orders/stop.sh
          delete:
            implementation: scripts/orders/uninstall.sh
    orders-java:
      type: tosker.nodes.Container
      artifacts:
        my_image:
          file: weaveworksdemos/msd-java:8u131
          type: tosker.artifacts.Image
          repository: docker_hub


    payment:
      type: tosker.nodes.Software
      requirements:
        - host: payment-go
      interfaces:
        Standard:
          configure:
            implementation: scripts/payment/configure.sh
          create:
            implementation: scripts/payment/install.sh
          start:
            implementation: scripts/payment/start.sh
            inputs:
              port: 80
          stop:
            implementation: scripts/payment/stop.sh
          delete:
            implementation: scripts/payment/uninstall.sh


    # POST /orders return 500 error if shipping is not running
    shipping:
      type: tosker.nodes.Software
      requirements:
        - connection: rabbitmq
        - connection: zipkin
        - host: shipping-java
      artifacts:
        shippingjar: ./artifacts/shipping.jar
      interfaces:
        Standard:
          configure:
            implementation: scripts/shipping/configure.sh
          create:
            implementation: scripts/shipping/install.sh
          start:
            implementation: scripts/shipping/start.sh
            inputs:
              port: 80
              jar: { get_artifact: [SELF, shippingjar] }
          stop:
            implementation: scripts/shipping/stop.sh
          delete:
            implementation: scripts/shipping/uninstall.sh


    shipping-java:
      type: tosker.nodes.Container
      properties:
        env_variable:
          JAVA_OPTS: -Djava.security.egd=file:/dev/urandom"
      artifacts:
        my_image:
          file: weaveworksdemos/msd-java:latest
          type: tosker.artifacts.Image
          repository: docker_hub

    rabbitmq:
      type: tosker.nodes.Container
      artifacts:
       my_image:
        file:  rabbitmq:3.6.8
        type: tosker.artifacts.Image.Service
        repository: docker_hub

    queue-master:
      type: tosker.nodes.Container
      requirements:
        - connection: rabbitmq
      artifacts:
        my_image:
          file: weaveworksdemos/queue-master
          type: tosker.artifacts.Image.Service
          repository: docker_hub
      properties:
        share_data:
          /var/run/docker.sock: /var/run/docker.sock

    payment-go:
      type: tosker.nodes.Container
      artifacts:
        my_image:
          file: golang:1.7
          type: tosker.artifacts.Image
          repository: docker_hub
    user-go:
      type: tosker.nodes.Container
      properties:
        env_variable:
          HATEAOS: user
      artifacts:
        my_image:
          file: golang:1.7
          type: tosker.artifacts.Image
          repository: docker_hub

    carts-java:
      type: tosker.nodes.Container
      artifacts:
        my_image:
          file: maven:3.2-jdk-8
          type: tosker.artifacts.Image
          repository: docker_hub

    orders-db:
      type: tosker.nodes.Container
      artifacts:
        my_image:
          file: mongo
          type: tosker.artifacts.Image.Service
          repository: docker_hub

    carts-db:
      type: tosker.nodes.Container
      artifacts:
        my_image:
          file: mongo
          type: tosker.artifacts.Image.Service
          repository: docker_hub

    user-db:
      type: tosker.nodes.Container
      artifacts:
        my_image:
          file: weaveworksdemos/user-db
          type: tosker.artifacts.Image.Service
          repository: docker_hub

    catalogue-db:
      type: tosker.nodes.Container
      artifacts:
        my_image:
          file: weaveworksdemos/catalogue-db
          type: tosker.artifacts.Image.Service
          repository: docker_hub
      properties:
        env_variable:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_DATABASE: socksdb

    # front-end-node:
    #   type: tosker.nodes.Container
    #   artifacts:
    #     my_image:
    #       file: node:4.8
    #       type: tosker.artifacts.Image
    #       repository: docker_hub

    # catalogue-go:
    #   type: tosker.nodes.Container
    #   artifacts:
    #     my_image:
    #       file: golang:1.7
    #       type: tosker.artifacts.Image
    #       repository: docker_hub

    # other images
    zipkin:
      type: tosker.nodes.Container
      artifacts:
        my_image:
          file: openzipkin/zipkin
          type: tosker.artifacts.Image.Service
          repository: docker_hub
      properties:
        ports:
          9411: 9411

    #
    # dbvolume:
    #   type: tosker.nodes.Volume
