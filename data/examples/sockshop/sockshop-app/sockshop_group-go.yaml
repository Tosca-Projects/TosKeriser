tosca_definitions_version: tosca_simple_yaml_1_0

description: SockShop microservice-based  demo application

repositories:
  docker_hub: https://registry.hub.docker.com/

imports:
  - tosker: https://di-unipi-socc.github.io/tosker-types/tosker.yaml
  # - tosker: tosker-types.yaml

topology_template:
  inputs:
    edge-router_port:
      type: integer
      default: 80
      description: Edger router external port
    payment_endpoint:
      type: string
      default: payment:81
    catalogue_endpoint:
      type: string
      default: catalogue:82
    user_endpoint:
      type: string
      default: user:83

  groups:
    group-go:
      type: tosker.groups.DeploymentUnit
      members: [ catalogue, user, payment ]

  node_templates:
    edge-router:
      type: tosker.nodes.Container
      requirements:
        - connection: front-end
      properties:
        ports:
          80: { get_input: edge-router_port }
      artifacts:
        my_image:
          file: weaveworksdemos/edge-router:latest
          type: tosker.artifacts.Image.Service
          repository: docker_hub

    front-end:
      type: tosker.nodes.Software
      requirements:
        - host: front-end-node
        - connection: catalogue
        - connection: user
        - connection: carts
        # TODO: pass the endpoint in in env_variable (http://carts is the default endpoint)
        # https://github.com/microservices-demo/front-end/blob/master/api/endpoints.js)
        - connection: orders
        # - connection: payment
      interfaces:
        Standard:
          create:
            implementation: scripts/front-end/install.sh
            inputs:
              repo: https://github.com/microservices-demo/front-end.git
              branch: master
          configure:
            implementation: scripts/front-end/configure.sh
            inputs:
              catalogue: { get_input: catalogue_endpoint }
              carts: carts
              user: { get_input: user_endpoint }
              orders: order
          start:
            implementation: scripts/front-end/start.sh
          stop:
            implementation: scripts/front-end/stop.sh
          delete:
            implementation: scripts/front-end/uninstall.sh

    catalogue:
      type: tosker.nodes.Software
      requirements:
        - host: go-container
        - connection: catalogue-db
      interfaces:
        Standard:
          create:
            implementation: scripts/catalogue/install.sh
          start:
            implementation: scripts/catalogue/start.sh
            inputs:
              port: 82
          stop:
            implementation: scripts/catalogue/stop.sh
          delete:
            implementation: scripts/catalogue/uninstall.sh

    user:
      type: tosker.nodes.Software
      requirements:
        - connection: user-db
        - host: go-container
      interfaces:
        Standard:
          configure:
            implementation: scripts/user/configure.sh
          create:
            implementation: scripts/user/install.sh
          start:
            implementation: scripts/user/start.sh
            inputs:
              database: mongodb
              mongohost: user-db
              port: 83
          stop:
            implementation: scripts/user/stop.sh
          delete:
            implementation: scripts/user/uninstall.sh

    carts:
      type: tosker.nodes.Software
      requirements:
        - host: carts-java
        - connection: carts-db
      artifacts:
        cartsjar: ./artifacts/carts.jar
      interfaces:
        Standard:
          create:
            implementation: scripts/carts/install.sh
          start:
            implementation: scripts/carts/start.sh
            inputs:
              port: 80
              jar: { get_artifact: [SELF, cartsjar] }
          stop:
            implementation: scripts/carts/stop.sh
          delete:
            implementation: scripts/carts/uninstall.sh

   # INFORMATION: Closed connection [connectionId{localValue:42, serverValue:248}] to localhost:27017 because the pool has been closed.
    orders:
      type: tosker.nodes.Software
      requirements:
        - host: orders-java
        - connection: orders-db
        - connection: zipkin
        - connection: shipping
        - connection: payment
        # - connection: carts
        # - connection: user
      # artifacts:
      #   ordersjar: ./artifacts/orders.jar
      interfaces:
        Standard:
          create:
            implementation: scripts/orders/install.sh
            inputs:
              payment: { get_input: payment_endpoint }
              shipping: shipping
          start:
            implementation: scripts/orders/start.sh
            inputs:
              port: 80
              # jar: { get_artifact: [SELF, ordersjar] }
          stop:
            implementation: scripts/orders/stop.sh
          delete:
            implementation: scripts/orders/uninstall.sh

    payment:
      type: tosker.nodes.Software
      requirements:
        - host: go-container
      interfaces:
        Standard:
          configure:
            implementation: scripts/payment/configure.sh
          create:
            implementation: scripts/payment/install.sh
          start:
            implementation: scripts/payment/start.sh
            inputs:
              port: 81
          stop:
            implementation: scripts/payment/stop.sh
          delete:
            implementation: scripts/payment/uninstall.sh

    # POST /orders return 500 error if shipping is not running
    shipping:
      type: tosker.nodes.Software
      requirements:
        - connection: rabbitmq
        - connection: zipkin
        - host: shipping-java
      artifacts:
        shippingjar: ./artifacts/shipping.jar
      interfaces:
        Standard:
          configure:
            implementation: scripts/shipping/configure.sh
          create:
            implementation: scripts/shipping/install.sh
          start:
            implementation: scripts/shipping/start.sh
            inputs:
              port: 80
              jar: { get_artifact: [SELF, shippingjar] }
          stop:
            implementation: scripts/shipping/stop.sh
          delete:
            implementation: scripts/shipping/uninstall.sh

    # Envarioments
    shipping-java:
      type: tosker.nodes.Container
      properties:
        env_variable:
          JAVA_OPTS: -Djava.security.egd=file:/dev/urandom"
      artifacts:
        my_image:
          file: weaveworksdemos/msd-java:latest
          type: tosker.artifacts.Image
          repository: docker_hub

    go-container:
      type: tosker.nodes.Container
      properties:
        env_variable:
          HATEAOS: user
      artifacts:
        my_image:
          file: golang:1.7
          type: tosker.artifacts.Image
          repository: docker_hub

    carts-java:
      type: tosker.nodes.Container
      artifacts:
        my_image:
          file: maven:3.2-jdk-8
          type: tosker.artifacts.Image
          repository: docker_hub

    front-end-node:
      type: tosker.nodes.Container
      artifacts:
        my_image:
          file: node:4.8
          type: tosker.artifacts.Image
          repository: docker_hub

    orders-java:
      type: tosker.nodes.Container
      artifacts:
        my_image:
          file: maven
          type: tosker.artifacts.Image
          repository: docker_hub

    # Databases
    orders-db:
      type: tosker.nodes.Container
      artifacts:
        my_image:
          file: mongo
          type: tosker.artifacts.Image.Service
          repository: docker_hub

    carts-db:
      type: tosker.nodes.Container
      artifacts:
        my_image:
          file: mongo
          type: tosker.artifacts.Image.Service
          repository: docker_hub

    user-db:
      type: tosker.nodes.Container
      artifacts:
        my_image:
          file: weaveworksdemos/user-db
          type: tosker.artifacts.Image.Service
          repository: docker_hub

    catalogue-db:
      type: tosker.nodes.Container
      artifacts:
        my_image:
          file: weaveworksdemos/catalogue-db
          type: tosker.artifacts.Image.Service
          repository: docker_hub
      properties:
        env_variable:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_DATABASE: socksdb

    # Other images
    zipkin:
      type: tosker.nodes.Container
      artifacts:
        my_image:
          file: openzipkin/zipkin
          type: tosker.artifacts.Image.Service
          repository: docker_hub
      properties:
        ports:
          9411: 9411

    rabbitmq:
      type: tosker.nodes.Container
      artifacts:
       my_image:
        file:  rabbitmq:3.6.8
        type: tosker.artifacts.Image.Service
        repository: docker_hub

    # queue-master:
    #   type: tosker.nodes.Container
    #   requirements:
    #     - connection: rabbitmq
    #   artifacts:
    #     my_image:
    #       file: weaveworksdemos/queue-master
    #       type: tosker.artifacts.Image.Service
    #       repository: docker_hub
    #   properties:
    #     share_data:
    #       /var/run/docker.sock: /var/run/docker.sock

    #
    # dbvolume:
    #   type: tosker.nodes.Volume
